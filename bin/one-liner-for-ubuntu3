#!/bin/bash

distro=`cat "$HOME/application/distro.txt"`

datetime=`date +"%Y-%m-%d-%H-%M-%S"`

build=`wget -q -O - "http://api.ca2.cc/store/linux_build?distro=$distro&$datetime"`

baseurl="http://timeserver.ca2.cc/$distro/$build"

appdir="$HOME/application/app-core/store/x64/"

mkdir -p "$appdir"

function get_hashprefix()
{

	error=1
   
	try=0
   
	while [ $error -ne 0 ] && [ $try -lt 3 ]; do

		cmd="wget -q -O - \"$1.md5\""

		echo $cmd

		hashprefix=`eval "$cmd"`
   
		echo "hashprefix=$hashprefix"
   
		if [ -z "$hashprefix" ]; then

			error=1

		else

			error=0
		
		fi
		  
		try=$(( $try + 1 ))

	done

}

function get_hash()
{
	
	file=$1

	if [ -f "$file" ]; then

		cmd="md5sum $file"
		  
		echo $cmd

		hash=`eval "$cmd"`
		  
		echo "hash=$hash"
	
	else
	
		hash=""
		
		echo "file doesn't exist"

   fi
   
}

function install_matter()
{

	matter=$1

	title=$(basename $matter)

	local dir=$HOME/.config/ca2/appmatter/$matter

	mkdir -p $dir

	cd $dir

	url="http://compressed-matterserver.ca2.cc/$matter.zip"

	get_hashprefix "$url"

	error=1

	try=0
   
	if [ -z "$hashprefix" ]; then

		error=1

		echo "No check available for $title.zip"

	else

		while [ $error -ne 0 ] && [ $try -lt 3 ]; do
		
			get_hash "$title.zip"
			  
			if [[ $hash == $hashprefix* ]]; then

				unzip -q -o $title.zip

				error=0

			else

				echo "$title.zip check failed"

				wget -q -O $title.zip "$url"
			  
			fi

			try=$(( $try + 1 ))

		done
		
	fi
		
}


function install_store_item()
{

	file=$1

	cd "$appdir"
   
	url="$baseurl/$file"

	get_hashprefix "$url"

	error=1
   
	try=0
   
	if [ -z "$hashprefix" ]; then

		error=1

		echo "No check available for $file"

	else

		while [ $error -ne 0 ] && [ $try -lt 3 ]; do

			get_hash "$file"
			
			if [[ $hash == $hashprefix* ]]; then

				error=0

			else

				echo "$file check failed"

				wget -q -O $file "$url"
			  
			fi
		   
			try=$(( $try + 1 ))

		done
		
	fi
	
}


function defer_add_library()
{

	library=$1

	package=$2

	if [ -z "$package" ]; then

		package=$library

	fi

	library_installed=`ldconfig -p | grep $library`

	if [ -z "$library_installed" ]; then

		export install=$install" $package"

	fi

}


function install_store_app()
{

	logpath="$1"

	mkdir -p "$appdir"

	#echo "this is the build $build"

	error=1

	try2=0
	
	while [ $error -ne 0 ] && [ $try2 -lt 1 ]; do

		install_store_item "libaqua.so"
		
		if [ $error -ne 0 ]; then

			echo "Couldn't run store (3.1)"

			exit 1

		fi

		#install_store_item "libatomiconv.so"
		#if [ $error -ne 0 ]; then

			#echo "Couldn't run store (3.2)"

			#exit 1

		#fi
		
		install_store_item "libaura.so"
		
		if [ $error -ne 0 ]; then

			echo "Couldn't run store (3.3)"

			exit 1

		fi
	   
		install_store_item "libaurasn.so"
		
		if [ $error -ne 0 ]; then

			echo "Couldn't run store (3.4)"

			exit 1

		fi
		
		install_store_item "libaxis.so"
		
		if [ $error -ne 0 ]; then

			echo "Couldn't run store (3.5)"

			exit 1

		fi
		
		install_store_item "libbase.so"
		
		if [ $error -ne 0 ]; then

			echo "Couldn't run store (3.6)"

			exit 1

		fi
		
		install_store_item "libcore.so"
		
		if [ $error -ne 0 ]; then

			echo "Couldn't run store (3.7)"

			exit 1

		fi
	   
		install_store_item "libdraw2d_cairo.so"
		
		if [ $error -ne 0 ]; then

			echo "Couldn't run store (3.8)"

			exit 1

		fi
	   
		install_store_item "libexperience_tranquillum.so"
		
		if [ $error -ne 0 ]; then

			echo "Couldn't run store (3.9)"

			exit 1

		fi
	   
		install_store_item "liblibrary.so"
		
		if [ $error -ne 0 ]; then

			echo "Couldn't run store (3.10)"

			exit 1

		fi
	   
		install_store_item "libapp_core_store.so"
		
		if [ $error -ne 0 ]; then

			echo "Couldn't run store (3.11)"

			exit 1

		fi
	   
		install_store_item "app_core_store"
		
		if [ $error -ne 0 ]; then

			echo "Couldn't run store (3.12)"

			exit 1

		fi
		
		cd "$appdir"

		export install=""

		defer_add_library "libfreeimage" "libfreeimage3"

		if [ ! -z "$install" ]; then

			sudo apt -y install$install

		fi

		cd "$appdir"
		chmod u+x app_core_store
		nohup ./app_core_store 2>&1 > "$logpath" &
		
		error=$?
			
		try2=$(( $try2 + 1 ))
		
	done

}

install_matter app/appmatter/main

if [ $error -ne 0 ]; then

   echo "Couldn't run store (1)"

   exit 1

fi

install_matter app-core/appmatter/store

if [ $error -ne 0 ]; then

   echo "Couldn't run store (2)"

   exit 1

fi

logpath="$1"

install_store_app "$logpath"



